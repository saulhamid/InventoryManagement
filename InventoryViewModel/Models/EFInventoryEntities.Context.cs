//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryViewModel.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryEntities : DbContext
    {
        public InventoryEntities()
            : base("name=InventoryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EnumCountry> EnumCountries { get; set; }
        public virtual DbSet<EnumDistric> EnumDistrics { get; set; }
        public virtual DbSet<EnumDivision> EnumDivisions { get; set; }
        public virtual DbSet<Market> Markets { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<ProductAssignDetail> ProductAssignDetails { get; set; }
        public virtual DbSet<ProductAssign> ProductAssigns { get; set; }
        public virtual DbSet<ProductBrand> ProductBrands { get; set; }
        public virtual DbSet<ProductCategory> ProductCategorys { get; set; }
        public virtual DbSet<ProductColor> ProductColors { get; set; }
        public virtual DbSet<ProductDetail> ProductDetails { get; set; }
        public virtual DbSet<ProductSize> ProductSizes { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<PurcheaseDetail> PurcheaseDetails { get; set; }
        public virtual DbSet<PurcheaseReturnDetail> PurcheaseReturnDetails { get; set; }
        public virtual DbSet<PurcheaseReturn> PurcheaseReturns { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SalesDetail> SalesDetails { get; set; }
        public virtual DbSet<StockDetail> StockDetails { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UOM> UOMs { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ZoneOrArea> ZoneOrAreas { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Product> Products { get; set; }
    
        public virtual ObjectResult<string> AutoProduct(string term)
        {
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AutoProduct", termParameter);
        }
    
        public virtual int Insert_StockDetail(Nullable<int> stockIdint, Nullable<decimal> stockReplace, Nullable<decimal> transReplace, Nullable<decimal> totalReplace, Nullable<decimal> stockReturn, Nullable<decimal> transReturn, Nullable<decimal> totalReturn, Nullable<decimal> stockDiscount, Nullable<decimal> transDiscount, Nullable<decimal> totalDiscount, Nullable<decimal> transSlup, Nullable<decimal> stockSlup, Nullable<decimal> totalSlup, Nullable<decimal> stockQuantity, Nullable<decimal> transQuantity, Nullable<decimal> totalQuantity, Nullable<decimal> totalPaid, Nullable<decimal> stockPrice, Nullable<decimal> transPrice, Nullable<decimal> totalPrice, string remarks, Nullable<bool> stockStutes, string date)
        {
            var stockIdintParameter = stockIdint.HasValue ?
                new ObjectParameter("StockIdint", stockIdint) :
                new ObjectParameter("StockIdint", typeof(int));
    
            var stockReplaceParameter = stockReplace.HasValue ?
                new ObjectParameter("StockReplace", stockReplace) :
                new ObjectParameter("StockReplace", typeof(decimal));
    
            var transReplaceParameter = transReplace.HasValue ?
                new ObjectParameter("TransReplace", transReplace) :
                new ObjectParameter("TransReplace", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var stockReturnParameter = stockReturn.HasValue ?
                new ObjectParameter("StockReturn", stockReturn) :
                new ObjectParameter("StockReturn", typeof(decimal));
    
            var transReturnParameter = transReturn.HasValue ?
                new ObjectParameter("TransReturn", transReturn) :
                new ObjectParameter("TransReturn", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var stockDiscountParameter = stockDiscount.HasValue ?
                new ObjectParameter("StockDiscount", stockDiscount) :
                new ObjectParameter("StockDiscount", typeof(decimal));
    
            var transDiscountParameter = transDiscount.HasValue ?
                new ObjectParameter("TransDiscount", transDiscount) :
                new ObjectParameter("TransDiscount", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var transSlupParameter = transSlup.HasValue ?
                new ObjectParameter("TransSlup", transSlup) :
                new ObjectParameter("TransSlup", typeof(decimal));
    
            var stockSlupParameter = stockSlup.HasValue ?
                new ObjectParameter("StockSlup", stockSlup) :
                new ObjectParameter("StockSlup", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(decimal));
    
            var transQuantityParameter = transQuantity.HasValue ?
                new ObjectParameter("TransQuantity", transQuantity) :
                new ObjectParameter("TransQuantity", typeof(decimal));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var stockPriceParameter = stockPrice.HasValue ?
                new ObjectParameter("StockPrice", stockPrice) :
                new ObjectParameter("StockPrice", typeof(decimal));
    
            var transPriceParameter = transPrice.HasValue ?
                new ObjectParameter("TransPrice", transPrice) :
                new ObjectParameter("TransPrice", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_StockDetail", stockIdintParameter, stockReplaceParameter, transReplaceParameter, totalReplaceParameter, stockReturnParameter, transReturnParameter, totalReturnParameter, stockDiscountParameter, transDiscountParameter, totalDiscountParameter, transSlupParameter, stockSlupParameter, totalSlupParameter, stockQuantityParameter, transQuantityParameter, totalQuantityParameter, totalPaidParameter, stockPriceParameter, transPriceParameter, totalPriceParameter, remarksParameter, stockStutesParameter, dateParameter);
        }
    
        public virtual ObjectResult<market_All_Result> market_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<market_All_Result>("market_All");
        }
    
        public virtual int Market_Insert(Nullable<int> id, Nullable<int> zoneOrAreaId, string code, string name, string description, string remarks, Nullable<bool> isActive, Nullable<bool> isArchive, string createdBy, string createdAt, string createdFrom, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var zoneOrAreaIdParameter = zoneOrAreaId.HasValue ?
                new ObjectParameter("ZoneOrAreaId", zoneOrAreaId) :
                new ObjectParameter("ZoneOrAreaId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isArchiveParameter = isArchive.HasValue ?
                new ObjectParameter("IsArchive", isArchive) :
                new ObjectParameter("IsArchive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdAtParameter = createdAt != null ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(string));
    
            var createdFromParameter = createdFrom != null ?
                new ObjectParameter("CreatedFrom", createdFrom) :
                new ObjectParameter("CreatedFrom", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Market_Insert", idParameter, zoneOrAreaIdParameter, codeParameter, nameParameter, descriptionParameter, remarksParameter, isActiveParameter, isArchiveParameter, createdByParameter, createdAtParameter, createdFromParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual ObjectResult<market_SelectbyId_Result> market_SelectbyId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<market_SelectbyId_Result>("market_SelectbyId", idParameter);
        }
    
        public virtual ObjectResult<productdetail_Result> productdetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<productdetail_Result>("productdetail");
        }
    
        public virtual int PurcheasReturnsByInvoice(string invoiecNo)
        {
            var invoiecNoParameter = invoiecNo != null ?
                new ObjectParameter("InvoiecNo", invoiecNo) :
                new ObjectParameter("InvoiecNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurcheasReturnsByInvoice", invoiecNoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_Productdetail_Result> SP_Productdetail(Nullable<int> productId, Nullable<int> productBrandId, Nullable<int> productCatagoriesId, Nullable<int> productColorId, Nullable<int> productTypeId, string productCode)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var productBrandIdParameter = productBrandId.HasValue ?
                new ObjectParameter("ProductBrandId", productBrandId) :
                new ObjectParameter("ProductBrandId", typeof(int));
    
            var productCatagoriesIdParameter = productCatagoriesId.HasValue ?
                new ObjectParameter("ProductCatagoriesId", productCatagoriesId) :
                new ObjectParameter("ProductCatagoriesId", typeof(int));
    
            var productColorIdParameter = productColorId.HasValue ?
                new ObjectParameter("ProductColorId", productColorId) :
                new ObjectParameter("ProductColorId", typeof(int));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Productdetail_Result>("SP_Productdetail", productIdParameter, productBrandIdParameter, productCatagoriesIdParameter, productColorIdParameter, productTypeIdParameter, productCodeParameter);
        }
    
        public virtual ObjectResult<SP_PucheaseAllParam_Result> SP_PucheaseAllParam(Nullable<int> purcheaseId, Nullable<int> supplierId, Nullable<int> employeeId, string invoiecNo, string startDate, string endDate)
        {
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var invoiecNoParameter = invoiecNo != null ?
                new ObjectParameter("InvoiecNo", invoiecNo) :
                new ObjectParameter("InvoiecNo", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PucheaseAllParam_Result>("SP_PucheaseAllParam", purcheaseIdParameter, supplierIdParameter, employeeIdParameter, invoiecNoParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_PucheaseSingle_Result> SP_PucheaseSingle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PucheaseSingle_Result>("SP_PucheaseSingle", idParameter);
        }
    
        public virtual ObjectResult<SP_PurcheaseDetail_Result> SP_PurcheaseDetail(Nullable<int> option, Nullable<int> id, Nullable<int> purchaseId, Nullable<int> productId, string productName, string productCode, Nullable<decimal> unitePrice, string date, Nullable<decimal> quantity, Nullable<decimal> discount, Nullable<decimal> slup, Nullable<decimal> totalPrice, string remarks, Nullable<bool> isActive, Nullable<bool> isArchive, string createdAt, string createdFrom, string createdAtBy, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var purchaseIdParameter = purchaseId.HasValue ?
                new ObjectParameter("PurchaseId", purchaseId) :
                new ObjectParameter("PurchaseId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var unitePriceParameter = unitePrice.HasValue ?
                new ObjectParameter("UnitePrice", unitePrice) :
                new ObjectParameter("UnitePrice", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var slupParameter = slup.HasValue ?
                new ObjectParameter("Slup", slup) :
                new ObjectParameter("Slup", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isArchiveParameter = isArchive.HasValue ?
                new ObjectParameter("IsArchive", isArchive) :
                new ObjectParameter("IsArchive", typeof(bool));
    
            var createdAtParameter = createdAt != null ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(string));
    
            var createdFromParameter = createdFrom != null ?
                new ObjectParameter("CreatedFrom", createdFrom) :
                new ObjectParameter("CreatedFrom", typeof(string));
    
            var createdAtByParameter = createdAtBy != null ?
                new ObjectParameter("CreatedAtBy", createdAtBy) :
                new ObjectParameter("CreatedAtBy", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PurcheaseDetail_Result>("SP_PurcheaseDetail", optionParameter, idParameter, purchaseIdParameter, productIdParameter, productNameParameter, productCodeParameter, unitePriceParameter, dateParameter, quantityParameter, discountParameter, slupParameter, totalPriceParameter, remarksParameter, isActiveParameter, isArchiveParameter, createdAtParameter, createdFromParameter, createdAtByParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual int sp_purcheaseReturenDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_purcheaseReturenDetails");
        }
    
        public virtual ObjectResult<SP_PurcheaseReturnDetail_Result> SP_PurcheaseReturnDetail(Nullable<int> purcheaseReturnId, string invoiceNO, Nullable<int> productId, Nullable<int> supplierId, string startDate, string endDate)
        {
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var invoiceNOParameter = invoiceNO != null ?
                new ObjectParameter("InvoiceNO", invoiceNO) :
                new ObjectParameter("InvoiceNO", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PurcheaseReturnDetail_Result>("SP_PurcheaseReturnDetail", purcheaseReturnIdParameter, invoiceNOParameter, productIdParameter, supplierIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<SP_SalesDatail_Result> SP_SalesDatail(Nullable<int> salesId, string invoiceNO, Nullable<int> productId, Nullable<int> customerId, Nullable<int> employeeId, Nullable<int> zoneId, Nullable<int> marketId, string startDate, string endDate)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var invoiceNOParameter = invoiceNO != null ?
                new ObjectParameter("InvoiceNO", invoiceNO) :
                new ObjectParameter("InvoiceNO", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var zoneIdParameter = zoneId.HasValue ?
                new ObjectParameter("ZoneId", zoneId) :
                new ObjectParameter("ZoneId", typeof(int));
    
            var marketIdParameter = marketId.HasValue ?
                new ObjectParameter("MarketId", marketId) :
                new ObjectParameter("MarketId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalesDatail_Result>("SP_SalesDatail", salesIdParameter, invoiceNOParameter, productIdParameter, customerIdParameter, employeeIdParameter, zoneIdParameter, marketIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_salesDatailrpts_Result> sp_salesDatailrpts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_salesDatailrpts_Result>("sp_salesDatailrpts");
        }
    
        public virtual ObjectResult<sp_SalesDetails_Result> sp_SalesDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SalesDetails_Result>("sp_SalesDetails");
        }
    
        public virtual ObjectResult<sp_singleCustomer_Result> sp_singleCustomer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_singleCustomer_Result>("sp_singleCustomer", idParameter);
        }
    
        public virtual ObjectResult<sp_singleEmployee_Result> sp_singleEmployee(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_singleEmployee_Result>("sp_singleEmployee", idParameter);
        }
    
        public virtual ObjectResult<sp_singleSupplier_Result> sp_singleSupplier(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_singleSupplier_Result>("sp_singleSupplier", idParameter);
        }
    
        public virtual int sp_StockAutoProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_StockAutoProduct");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<uom_select_Result> uom_select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uom_select_Result>("uom_select");
        }
    
        public virtual ObjectResult<SP_PurcheaseIndex_Result> SP_PurcheaseIndex(Nullable<int> purcheaseId, string invoiceNO, Nullable<int> supplierId, string startDate, string endDate)
        {
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var invoiceNOParameter = invoiceNO != null ?
                new ObjectParameter("InvoiceNO", invoiceNO) :
                new ObjectParameter("InvoiceNO", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PurcheaseIndex_Result>("SP_PurcheaseIndex", purcheaseIdParameter, invoiceNOParameter, supplierIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_Stocks_Result> SP_Stocks(Nullable<int> stockId, Nullable<int> productId, Nullable<int> productBrandId, Nullable<int> productCatagoriesId, Nullable<int> productColorId, Nullable<int> productTypeId, string productCode, Nullable<int> supplierId, string startDate, string endDate)
        {
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var productBrandIdParameter = productBrandId.HasValue ?
                new ObjectParameter("ProductBrandId", productBrandId) :
                new ObjectParameter("ProductBrandId", typeof(int));
    
            var productCatagoriesIdParameter = productCatagoriesId.HasValue ?
                new ObjectParameter("ProductCatagoriesId", productCatagoriesId) :
                new ObjectParameter("ProductCatagoriesId", typeof(int));
    
            var productColorIdParameter = productColorId.HasValue ?
                new ObjectParameter("ProductColorId", productColorId) :
                new ObjectParameter("ProductColorId", typeof(int));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Stocks_Result>("SP_Stocks", stockIdParameter, productIdParameter, productBrandIdParameter, productCatagoriesIdParameter, productColorIdParameter, productTypeIdParameter, productCodeParameter, supplierIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int SP_InsertProdutDetail(Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, string remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertProdutDetail", productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual ObjectResult<SP_Product_Result> SP_Product(Nullable<int> id, string code, string name, Nullable<int> uOMId, Nullable<int> productBrandId, Nullable<int> productCatagoriesId, Nullable<int> productColorId, Nullable<int> productSizeId, Nullable<int> productTypeId, Nullable<int> supplierId, Nullable<int> minimumStock, Nullable<decimal> otherCost, Nullable<decimal> discount, Nullable<decimal> unitePrice, Nullable<decimal> quantity, Nullable<decimal> openingQuantity, string remarks, string createdBy, string createdAt, string createdFrom, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom, Nullable<int> option)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uOMIdParameter = uOMId.HasValue ?
                new ObjectParameter("UOMId", uOMId) :
                new ObjectParameter("UOMId", typeof(int));
    
            var productBrandIdParameter = productBrandId.HasValue ?
                new ObjectParameter("ProductBrandId", productBrandId) :
                new ObjectParameter("ProductBrandId", typeof(int));
    
            var productCatagoriesIdParameter = productCatagoriesId.HasValue ?
                new ObjectParameter("ProductCatagoriesId", productCatagoriesId) :
                new ObjectParameter("ProductCatagoriesId", typeof(int));
    
            var productColorIdParameter = productColorId.HasValue ?
                new ObjectParameter("ProductColorId", productColorId) :
                new ObjectParameter("ProductColorId", typeof(int));
    
            var productSizeIdParameter = productSizeId.HasValue ?
                new ObjectParameter("ProductSizeId", productSizeId) :
                new ObjectParameter("ProductSizeId", typeof(int));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var minimumStockParameter = minimumStock.HasValue ?
                new ObjectParameter("MinimumStock", minimumStock) :
                new ObjectParameter("MinimumStock", typeof(int));
    
            var otherCostParameter = otherCost.HasValue ?
                new ObjectParameter("OtherCost", otherCost) :
                new ObjectParameter("OtherCost", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var unitePriceParameter = unitePrice.HasValue ?
                new ObjectParameter("UnitePrice", unitePrice) :
                new ObjectParameter("UnitePrice", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var openingQuantityParameter = openingQuantity.HasValue ?
                new ObjectParameter("OpeningQuantity", openingQuantity) :
                new ObjectParameter("OpeningQuantity", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdAtParameter = createdAt != null ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(string));
    
            var createdFromParameter = createdFrom != null ?
                new ObjectParameter("CreatedFrom", createdFrom) :
                new ObjectParameter("CreatedFrom", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Product_Result>("SP_Product", idParameter, codeParameter, nameParameter, uOMIdParameter, productBrandIdParameter, productCatagoriesIdParameter, productColorIdParameter, productSizeIdParameter, productTypeIdParameter, supplierIdParameter, minimumStockParameter, otherCostParameter, discountParameter, unitePriceParameter, quantityParameter, openingQuantityParameter, remarksParameter, createdByParameter, createdAtParameter, createdFromParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter, optionParameter);
        }
    
        public virtual int SP_ProductDetailInsert(Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, Nullable<decimal> remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks.HasValue ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(decimal));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProductDetailInsert", productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual ObjectResult<SP_Purchease_Result> SP_Purchease(Nullable<int> option, Nullable<int> id, string invoiecNo, Nullable<int> supplierId, Nullable<int> employeeId, string date, string startDate, string endDate, string remarks, Nullable<bool> isActive, Nullable<bool> isArchive, string createdBy, string createdAt, string createdFrom, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom, ObjectParameter mSG)
        {
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var invoiecNoParameter = invoiecNo != null ?
                new ObjectParameter("InvoiecNo", invoiecNo) :
                new ObjectParameter("InvoiecNo", typeof(string));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isArchiveParameter = isArchive.HasValue ?
                new ObjectParameter("IsArchive", isArchive) :
                new ObjectParameter("IsArchive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdAtParameter = createdAt != null ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(string));
    
            var createdFromParameter = createdFrom != null ?
                new ObjectParameter("CreatedFrom", createdFrom) :
                new ObjectParameter("CreatedFrom", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Purchease_Result>("SP_Purchease", optionParameter, idParameter, invoiecNoParameter, supplierIdParameter, employeeIdParameter, dateParameter, startDateParameter, endDateParameter, remarksParameter, isActiveParameter, isArchiveParameter, createdByParameter, createdAtParameter, createdFromParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter, mSG);
        }
    
        public virtual int SP_PurcheaseDetails(Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, Nullable<decimal> remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks.HasValue ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(decimal));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PurcheaseDetails", productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual int SP_StockDetailInsertl(Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, Nullable<decimal> remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom, Nullable<int> option)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks.HasValue ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(decimal));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_StockDetailInsertl", productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter, optionParameter);
        }
    
        public virtual int SP_StockInsert(Nullable<int> id, Nullable<int> productId, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> stockQuantity, Nullable<decimal> totalQuantity, Nullable<decimal> totalPaid, Nullable<decimal> totalPrice, Nullable<decimal> grandTotal, string date, Nullable<decimal> finalUnitPrice, Nullable<decimal> openingQuantity, string remarks, Nullable<bool> stockStutes, Nullable<bool> isActive, Nullable<bool> isArchive, string createdBy, string createdAt, string createdFrom, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom, Nullable<int> option)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(decimal));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var grandTotalParameter = grandTotal.HasValue ?
                new ObjectParameter("GrandTotal", grandTotal) :
                new ObjectParameter("GrandTotal", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var openingQuantityParameter = openingQuantity.HasValue ?
                new ObjectParameter("OpeningQuantity", openingQuantity) :
                new ObjectParameter("OpeningQuantity", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isArchiveParameter = isArchive.HasValue ?
                new ObjectParameter("IsArchive", isArchive) :
                new ObjectParameter("IsArchive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdAtParameter = createdAt != null ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(string));
    
            var createdFromParameter = createdFrom != null ?
                new ObjectParameter("CreatedFrom", createdFrom) :
                new ObjectParameter("CreatedFrom", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_StockInsert", idParameter, productIdParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, stockQuantityParameter, totalQuantityParameter, totalPaidParameter, totalPriceParameter, grandTotalParameter, dateParameter, finalUnitPriceParameter, openingQuantityParameter, remarksParameter, stockStutesParameter, isActiveParameter, isArchiveParameter, createdByParameter, createdAtParameter, createdFromParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter, optionParameter);
        }
    
        public virtual int SP_StockUpdateAdd(Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, Nullable<decimal> remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks.HasValue ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(decimal));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_StockUpdateAdd", productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual int SP_StockUpdateAddWithstockdetail(Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, Nullable<decimal> remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks.HasValue ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(decimal));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_StockUpdateAddWithstockdetail", productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual int SP_StockUpdateRemove(Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, Nullable<decimal> remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks.HasValue ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(decimal));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_StockUpdateRemove", productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual ObjectResult<PurcheaseDetail_Result> PurcheaseDetail(Nullable<int> option, Nullable<int> purchaseId, Nullable<int> productId, string productName, string productCode, Nullable<decimal> unitePrice, string date, Nullable<decimal> quantity, Nullable<decimal> discount, Nullable<decimal> slup, Nullable<decimal> totalPrice, string remarks, Nullable<bool> isActive, Nullable<bool> isArchive, string createdAt, string createdFrom, string createdAtBy, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom)
        {
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            var purchaseIdParameter = purchaseId.HasValue ?
                new ObjectParameter("PurchaseId", purchaseId) :
                new ObjectParameter("PurchaseId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var unitePriceParameter = unitePrice.HasValue ?
                new ObjectParameter("UnitePrice", unitePrice) :
                new ObjectParameter("UnitePrice", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var slupParameter = slup.HasValue ?
                new ObjectParameter("Slup", slup) :
                new ObjectParameter("Slup", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isArchiveParameter = isArchive.HasValue ?
                new ObjectParameter("IsArchive", isArchive) :
                new ObjectParameter("IsArchive", typeof(bool));
    
            var createdAtParameter = createdAt != null ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(string));
    
            var createdFromParameter = createdFrom != null ?
                new ObjectParameter("CreatedFrom", createdFrom) :
                new ObjectParameter("CreatedFrom", typeof(string));
    
            var createdAtByParameter = createdAtBy != null ?
                new ObjectParameter("CreatedAtBy", createdAtBy) :
                new ObjectParameter("CreatedAtBy", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurcheaseDetail_Result>("PurcheaseDetail", optionParameter, purchaseIdParameter, productIdParameter, productNameParameter, productCodeParameter, unitePriceParameter, dateParameter, quantityParameter, discountParameter, slupParameter, totalPriceParameter, remarksParameter, isActiveParameter, isArchiveParameter, createdAtParameter, createdFromParameter, createdAtByParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter);
        }
    
        public virtual ObjectResult<SP_Stock_Result> SP_Stock(Nullable<int> id, Nullable<int> productId, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> stockQuantity, Nullable<decimal> quantity, Nullable<decimal> totalPaid, Nullable<decimal> totalPrice, Nullable<decimal> grandTotal, string date, Nullable<decimal> finalUnitPrice, Nullable<decimal> openingQuantity, string remarks, Nullable<bool> stockStutes, Nullable<bool> isActive, Nullable<bool> isArchive, string createdBy, string createdAt, string createdFrom, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom, Nullable<int> option)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var stockQuantityParameter = stockQuantity.HasValue ?
                new ObjectParameter("StockQuantity", stockQuantity) :
                new ObjectParameter("StockQuantity", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var grandTotalParameter = grandTotal.HasValue ?
                new ObjectParameter("GrandTotal", grandTotal) :
                new ObjectParameter("GrandTotal", typeof(decimal));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var openingQuantityParameter = openingQuantity.HasValue ?
                new ObjectParameter("OpeningQuantity", openingQuantity) :
                new ObjectParameter("OpeningQuantity", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isArchiveParameter = isArchive.HasValue ?
                new ObjectParameter("IsArchive", isArchive) :
                new ObjectParameter("IsArchive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdAtParameter = createdAt != null ?
                new ObjectParameter("CreatedAt", createdAt) :
                new ObjectParameter("CreatedAt", typeof(string));
    
            var createdFromParameter = createdFrom != null ?
                new ObjectParameter("CreatedFrom", createdFrom) :
                new ObjectParameter("CreatedFrom", typeof(string));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Stock_Result>("SP_Stock", idParameter, productIdParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, stockQuantityParameter, quantityParameter, totalPaidParameter, totalPriceParameter, grandTotalParameter, dateParameter, finalUnitPriceParameter, openingQuantityParameter, remarksParameter, stockStutesParameter, isActiveParameter, isArchiveParameter, createdByParameter, createdAtParameter, createdFromParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter, optionParameter);
        }
    
        public virtual int SP_StockDetail(Nullable<int> id, Nullable<int> productId, Nullable<int> purcheaseId, Nullable<int> salesId, Nullable<int> salesReturnId, Nullable<int> purcheaseReturnId, string date, Nullable<decimal> totalQuantity, Nullable<decimal> totalReplace, Nullable<decimal> totalReturn, Nullable<decimal> totalDiscount, Nullable<decimal> totalSlup, Nullable<decimal> finalUnitPrice, Nullable<decimal> totalPaid, Nullable<decimal> remarks, Nullable<bool> stockStutes, string lastUpdateBy, string lastUpdateAt, string lastUpdateFrom, Nullable<int> option)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var purcheaseIdParameter = purcheaseId.HasValue ?
                new ObjectParameter("PurcheaseId", purcheaseId) :
                new ObjectParameter("PurcheaseId", typeof(int));
    
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var salesReturnIdParameter = salesReturnId.HasValue ?
                new ObjectParameter("SalesReturnId", salesReturnId) :
                new ObjectParameter("SalesReturnId", typeof(int));
    
            var purcheaseReturnIdParameter = purcheaseReturnId.HasValue ?
                new ObjectParameter("PurcheaseReturnId", purcheaseReturnId) :
                new ObjectParameter("PurcheaseReturnId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var totalQuantityParameter = totalQuantity.HasValue ?
                new ObjectParameter("TotalQuantity", totalQuantity) :
                new ObjectParameter("TotalQuantity", typeof(decimal));
    
            var totalReplaceParameter = totalReplace.HasValue ?
                new ObjectParameter("TotalReplace", totalReplace) :
                new ObjectParameter("TotalReplace", typeof(decimal));
    
            var totalReturnParameter = totalReturn.HasValue ?
                new ObjectParameter("TotalReturn", totalReturn) :
                new ObjectParameter("TotalReturn", typeof(decimal));
    
            var totalDiscountParameter = totalDiscount.HasValue ?
                new ObjectParameter("TotalDiscount", totalDiscount) :
                new ObjectParameter("TotalDiscount", typeof(decimal));
    
            var totalSlupParameter = totalSlup.HasValue ?
                new ObjectParameter("TotalSlup", totalSlup) :
                new ObjectParameter("TotalSlup", typeof(decimal));
    
            var finalUnitPriceParameter = finalUnitPrice.HasValue ?
                new ObjectParameter("FinalUnitPrice", finalUnitPrice) :
                new ObjectParameter("FinalUnitPrice", typeof(decimal));
    
            var totalPaidParameter = totalPaid.HasValue ?
                new ObjectParameter("TotalPaid", totalPaid) :
                new ObjectParameter("TotalPaid", typeof(decimal));
    
            var remarksParameter = remarks.HasValue ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(decimal));
    
            var stockStutesParameter = stockStutes.HasValue ?
                new ObjectParameter("StockStutes", stockStutes) :
                new ObjectParameter("StockStutes", typeof(bool));
    
            var lastUpdateByParameter = lastUpdateBy != null ?
                new ObjectParameter("LastUpdateBy", lastUpdateBy) :
                new ObjectParameter("LastUpdateBy", typeof(string));
    
            var lastUpdateAtParameter = lastUpdateAt != null ?
                new ObjectParameter("LastUpdateAt", lastUpdateAt) :
                new ObjectParameter("LastUpdateAt", typeof(string));
    
            var lastUpdateFromParameter = lastUpdateFrom != null ?
                new ObjectParameter("LastUpdateFrom", lastUpdateFrom) :
                new ObjectParameter("LastUpdateFrom", typeof(string));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_StockDetail", idParameter, productIdParameter, purcheaseIdParameter, salesIdParameter, salesReturnIdParameter, purcheaseReturnIdParameter, dateParameter, totalQuantityParameter, totalReplaceParameter, totalReturnParameter, totalDiscountParameter, totalSlupParameter, finalUnitPriceParameter, totalPaidParameter, remarksParameter, stockStutesParameter, lastUpdateByParameter, lastUpdateAtParameter, lastUpdateFromParameter, optionParameter);
        }
    }
}
